/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * API version: 2.54
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type SpacesApiService service

/*
SpacesApiService Space lookup by Space ID
Returns a variety of information about the Space specified by the requested ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the Space to be retrieved.
 * @param optional nil or *SpacesApiFindSpaceByIdOpts - Optional Parameters:
     * @param "SpaceFields" (optional.Interface of []string) -  A comma separated list of Space fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "TopicFields" (optional.Interface of []string) -  A comma separated list of Topic fields to display.
@return Get2SpacesIdResponse
*/

type SpacesApiFindSpaceByIdOpts struct {
	SpaceFields optional.Interface
	Expansions  optional.Interface
	UserFields  optional.Interface
	TopicFields optional.Interface
}

func (a *SpacesApiService) FindSpaceById(ctx context.Context, id string, localVarOptionals *SpacesApiFindSpaceByIdOpts) (Get2SpacesIdResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2SpacesIdResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/spaces/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.SpaceFields.IsSet() {
		localVarQueryParams.Add("space.fields", parameterToString(localVarOptionals.SpaceFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.TopicFields.IsSet() {
		localVarQueryParams.Add("topic.fields", parameterToString(localVarOptionals.TopicFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2SpacesIdResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
SpacesApiService Space lookup by their creators
Returns a variety of information about the Spaces created by the provided User IDs
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param userIds The IDs of Users to search through.
 * @param optional nil or *SpacesApiFindSpacesByCreatorIdsOpts - Optional Parameters:
     * @param "SpaceFields" (optional.Interface of []string) -  A comma separated list of Space fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "TopicFields" (optional.Interface of []string) -  A comma separated list of Topic fields to display.
@return Get2SpacesByCreatorIdsResponse
*/

type SpacesApiFindSpacesByCreatorIdsOpts struct {
	SpaceFields optional.Interface
	Expansions  optional.Interface
	UserFields  optional.Interface
	TopicFields optional.Interface
}

func (a *SpacesApiService) FindSpacesByCreatorIds(ctx context.Context, userIds []string, localVarOptionals *SpacesApiFindSpacesByCreatorIdsOpts) (Get2SpacesByCreatorIdsResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2SpacesByCreatorIdsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/spaces/by/creator_ids"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if len(userIds) < 1 {
		return localVarReturnValue, nil, reportError("userIds must have at least 1 elements")
	}
	if len(userIds) > 100 {
		return localVarReturnValue, nil, reportError("userIds must have less than 100 elements")
	}

	localVarQueryParams.Add("user_ids", parameterToString(userIds, "multi"))
	if localVarOptionals != nil && localVarOptionals.SpaceFields.IsSet() {
		localVarQueryParams.Add("space.fields", parameterToString(localVarOptionals.SpaceFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.TopicFields.IsSet() {
		localVarQueryParams.Add("topic.fields", parameterToString(localVarOptionals.TopicFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2SpacesByCreatorIdsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
SpacesApiService Space lookup up Space IDs
Returns a variety of information about the Spaces specified by the requested IDs
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ids The list of Space IDs to return.
 * @param optional nil or *SpacesApiFindSpacesByIdsOpts - Optional Parameters:
     * @param "SpaceFields" (optional.Interface of []string) -  A comma separated list of Space fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "TopicFields" (optional.Interface of []string) -  A comma separated list of Topic fields to display.
@return Get2SpacesResponse
*/

type SpacesApiFindSpacesByIdsOpts struct {
	SpaceFields optional.Interface
	Expansions  optional.Interface
	UserFields  optional.Interface
	TopicFields optional.Interface
}

func (a *SpacesApiService) FindSpacesByIds(ctx context.Context, ids []string, localVarOptionals *SpacesApiFindSpacesByIdsOpts) (Get2SpacesResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2SpacesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/spaces"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if len(ids) < 1 {
		return localVarReturnValue, nil, reportError("ids must have at least 1 elements")
	}
	if len(ids) > 100 {
		return localVarReturnValue, nil, reportError("ids must have less than 100 elements")
	}

	localVarQueryParams.Add("ids", parameterToString(ids, "multi"))
	if localVarOptionals != nil && localVarOptionals.SpaceFields.IsSet() {
		localVarQueryParams.Add("space.fields", parameterToString(localVarOptionals.SpaceFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.TopicFields.IsSet() {
		localVarQueryParams.Add("topic.fields", parameterToString(localVarOptionals.TopicFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2SpacesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
SpacesApiService Search for Spaces
Returns Spaces that match the provided query.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The search query.
 * @param optional nil or *SpacesApiSearchSpacesOpts - Optional Parameters:
     * @param "State" (optional.String) -  The state of Spaces to search for.
     * @param "MaxResults" (optional.Int32) -  The number of results to return.
     * @param "SpaceFields" (optional.Interface of []string) -  A comma separated list of Space fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "TopicFields" (optional.Interface of []string) -  A comma separated list of Topic fields to display.
@return Get2SpacesSearchResponse
*/

type SpacesApiSearchSpacesOpts struct {
	State       optional.String
	MaxResults  optional.Int32
	SpaceFields optional.Interface
	Expansions  optional.Interface
	UserFields  optional.Interface
	TopicFields optional.Interface
}

func (a *SpacesApiService) SearchSpaces(ctx context.Context, query string, localVarOptionals *SpacesApiSearchSpacesOpts) (Get2SpacesSearchResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2SpacesSearchResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/spaces/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(query) < 1 {
		return localVarReturnValue, nil, reportError("query must have at least 1 elements")
	}
	if strlen(query) > 2048 {
		return localVarReturnValue, nil, reportError("query must have less than 2048 elements")
	}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.State.IsSet() {
		localVarQueryParams.Add("state", parameterToString(localVarOptionals.State.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SpaceFields.IsSet() {
		localVarQueryParams.Add("space.fields", parameterToString(localVarOptionals.SpaceFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.TopicFields.IsSet() {
		localVarQueryParams.Add("topic.fields", parameterToString(localVarOptionals.TopicFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2SpacesSearchResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
SpacesApiService Retrieve the list of Users who purchased a ticket to the given space
Retrieves the list of Users who purchased a ticket to the given space
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the Space to be retrieved.
 * @param optional nil or *SpacesApiSpaceBuyersOpts - Optional Parameters:
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get a specified &#x27;page&#x27; of results.
     * @param "MaxResults" (optional.Int32) -  The maximum number of results.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
@return Get2SpacesIdBuyersResponse
*/

type SpacesApiSpaceBuyersOpts struct {
	PaginationToken optional.Interface
	MaxResults      optional.Int32
	UserFields      optional.Interface
	Expansions      optional.Interface
	TweetFields     optional.Interface
}

func (a *SpacesApiService) SpaceBuyers(ctx context.Context, id string, localVarOptionals *SpacesApiSpaceBuyersOpts) (Get2SpacesIdBuyersResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2SpacesIdBuyersResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/spaces/{id}/buyers"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2SpacesIdBuyersResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
SpacesApiService Retrieve Tweets from a Space.
Retrieves Tweets shared in the specified Space.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the Space to be retrieved.
 * @param optional nil or *SpacesApiSpaceTweetsOpts - Optional Parameters:
     * @param "MaxResults" (optional.Int32) -  The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2SpacesIdTweetsResponse
*/

type SpacesApiSpaceTweetsOpts struct {
	MaxResults  optional.Int32
	TweetFields optional.Interface
	Expansions  optional.Interface
	MediaFields optional.Interface
	PollFields  optional.Interface
	UserFields  optional.Interface
	PlaceFields optional.Interface
}

func (a *SpacesApiService) SpaceTweets(ctx context.Context, id string, localVarOptionals *SpacesApiSpaceTweetsOpts) (Get2SpacesIdTweetsResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2SpacesIdTweetsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/spaces/{id}/tweets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2SpacesIdTweetsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
