/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * API version: 2.54
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type TweetsApiService service

/*
TweetsApiService Add/Delete rules
Add or delete rules from a User&#x27;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
 * @param optional nil or *TweetsApiAddOrDeleteRulesOpts - Optional Parameters:
     * @param "DryRun" (optional.Bool) -  Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes.
@return AddOrDeleteRulesResponse
*/

type TweetsApiAddOrDeleteRulesOpts struct {
	DryRun optional.Bool
}

func (a *TweetsApiService) AddOrDeleteRules(ctx context.Context, body AddOrDeleteRulesRequest, localVarOptionals *TweetsApiAddOrDeleteRulesOpts) (AddOrDeleteRulesResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AddOrDeleteRulesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/search/stream/rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DryRun.IsSet() {
		localVarQueryParams.Add("dry_run", parameterToString(localVarOptionals.DryRun.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v AddOrDeleteRulesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Creation of a Tweet
Causes the User to create a Tweet under the authorized account.
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body

@return TweetCreateResponse
*/
func (a *TweetsApiService) CreateTweet(ctx context.Context, body TweetCreateRequest) (TweetCreateResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue TweetCreateResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v TweetCreateResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Tweet delete by Tweet ID
Delete specified Tweet (in the path) by ID.
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param id The ID of the Tweet to be deleted.

@return TweetDeleteResponse
*/
func (a *TweetsApiService) DeleteTweetById(ctx context.Context, id string) (TweetDeleteResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue TweetDeleteResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v TweetDeleteResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Tweet lookup by Tweet ID
Returns a variety of information about the Tweet specified by the requested ID.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id A single Tweet ID.
 * @param optional nil or *TweetsApiFindTweetByIdOpts - Optional Parameters:
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2TweetsIdResponse
*/

type TweetsApiFindTweetByIdOpts struct {
	TweetFields optional.Interface
	Expansions  optional.Interface
	MediaFields optional.Interface
	PollFields  optional.Interface
	UserFields  optional.Interface
	PlaceFields optional.Interface
}

func (a *TweetsApiService) FindTweetById(ctx context.Context, id string, localVarOptionals *TweetsApiFindTweetByIdOpts) (Get2TweetsIdResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2TweetsIdResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2TweetsIdResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Tweet lookup by Tweet IDs
Returns a variety of information about the Tweet specified by the requested ID.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ids A comma separated list of Tweet IDs. Up to 100 are allowed in a single request.
 * @param optional nil or *TweetsApiFindTweetsByIdOpts - Optional Parameters:
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2TweetsResponse
*/

type TweetsApiFindTweetsByIdOpts struct {
	TweetFields optional.Interface
	Expansions  optional.Interface
	MediaFields optional.Interface
	PollFields  optional.Interface
	UserFields  optional.Interface
	PlaceFields optional.Interface
}

func (a *TweetsApiService) FindTweetsById(ctx context.Context, ids []string, localVarOptionals *TweetsApiFindTweetsByIdOpts) (Get2TweetsResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2TweetsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if len(ids) < 1 {
		return localVarReturnValue, nil, reportError("ids must have at least 1 elements")
	}
	if len(ids) > 100 {
		return localVarReturnValue, nil, reportError("ids must have less than 100 elements")
	}

	localVarQueryParams.Add("ids", parameterToString(ids, "csv"))
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2TweetsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Retrieve Tweets that quote a Tweet.
Returns a variety of information about each Tweet that quotes the Tweet specified by the requested ID.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id A single Tweet ID.
 * @param optional nil or *TweetsApiFindTweetsThatQuoteATweetOpts - Optional Parameters:
     * @param "MaxResults" (optional.Int32) -  The maximum number of results to be returned.
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get a specified &#x27;page&#x27; of results.
     * @param "Exclude" (optional.Interface of []string) -  The set of entities to exclude (e.g. &#x27;replies&#x27; or &#x27;retweets&#x27;).
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2TweetsIdQuoteTweetsResponse
*/

type TweetsApiFindTweetsThatQuoteATweetOpts struct {
	MaxResults      optional.Int32
	PaginationToken optional.Interface
	Exclude         optional.Interface
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) FindTweetsThatQuoteATweet(ctx context.Context, id string, localVarOptionals *TweetsApiFindTweetsThatQuoteATweetOpts) (Get2TweetsIdQuoteTweetsResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2TweetsIdQuoteTweetsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/{id}/quote_tweets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Exclude.IsSet() {
		localVarQueryParams.Add("exclude", parameterToString(localVarOptionals.Exclude.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2TweetsIdQuoteTweetsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Rules lookup
Returns rules from a User&#x27;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *TweetsApiGetRulesOpts - Optional Parameters:
     * @param "Ids" (optional.Interface of []string) -  A comma-separated list of Rule IDs.
     * @param "MaxResults" (optional.Int32) -  The maximum number of results.
     * @param "PaginationToken" (optional.String) -  This value is populated by passing the &#x27;next_token&#x27; returned in a request to paginate through results.
@return RulesLookupResponse
*/

type TweetsApiGetRulesOpts struct {
	Ids             optional.Interface
	MaxResults      optional.Int32
	PaginationToken optional.String
}

func (a *TweetsApiService) GetRules(ctx context.Context, localVarOptionals *TweetsApiGetRulesOpts) (RulesLookupResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue RulesLookupResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/search/stream/rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Ids.IsSet() {
		localVarQueryParams.Add("ids", parameterToString(localVarOptionals.Ids.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RulesLookupResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Firehose stream
Streams 100% of public Tweets.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param partition The partition number.
 * @param optional nil or *TweetsApiGetTweetsFirehoseStreamOpts - Optional Parameters:
     * @param "BackfillMinutes" (optional.Int32) -  The number of minutes of backfill requested.
     * @param "StartTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided.
     * @param "EndTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return StreamingTweetResponse
*/

type TweetsApiGetTweetsFirehoseStreamOpts struct {
	BackfillMinutes optional.Int32
	StartTime       optional.Time
	EndTime         optional.Time
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) GetTweetsFirehoseStream(ctx context.Context, partition int32, localVarOptionals *TweetsApiGetTweetsFirehoseStreamOpts) (StreamingTweetResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue StreamingTweetResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/firehose/stream"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if partition < 1 {
		return localVarReturnValue, nil, reportError("partition must be greater than 1")
	}
	if partition > 20 {
		return localVarReturnValue, nil, reportError("partition must be less than 20")
	}

	if localVarOptionals != nil && localVarOptionals.BackfillMinutes.IsSet() {
		localVarQueryParams.Add("backfill_minutes", parameterToString(localVarOptionals.BackfillMinutes.Value(), ""))
	}
	localVarQueryParams.Add("partition", parameterToString(partition, ""))
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarQueryParams.Add("end_time", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v StreamingTweetResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Sample 10% stream
Streams a deterministic 10% of public Tweets.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param partition The partition number.
 * @param optional nil or *TweetsApiGetTweetsSample10StreamOpts - Optional Parameters:
     * @param "BackfillMinutes" (optional.Int32) -  The number of minutes of backfill requested.
     * @param "StartTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided.
     * @param "EndTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2TweetsSample10StreamResponse
*/

type TweetsApiGetTweetsSample10StreamOpts struct {
	BackfillMinutes optional.Int32
	StartTime       optional.Time
	EndTime         optional.Time
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) GetTweetsSample10Stream(ctx context.Context, partition int32, localVarOptionals *TweetsApiGetTweetsSample10StreamOpts) (Get2TweetsSample10StreamResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2TweetsSample10StreamResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/sample10/stream"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if partition < 1 {
		return localVarReturnValue, nil, reportError("partition must be greater than 1")
	}
	if partition > 2 {
		return localVarReturnValue, nil, reportError("partition must be less than 2")
	}

	if localVarOptionals != nil && localVarOptionals.BackfillMinutes.IsSet() {
		localVarQueryParams.Add("backfill_minutes", parameterToString(localVarOptionals.BackfillMinutes.Value(), ""))
	}
	localVarQueryParams.Add("partition", parameterToString(partition, ""))
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarQueryParams.Add("end_time", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2TweetsSample10StreamResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Hide replies
Hides or unhides a reply to an owned conversation.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tweetId The ID of the reply that you want to hide or unhide.
 * @param optional nil or *TweetsApiHideReplyByIdOpts - Optional Parameters:
     * @param "Body" (optional.Interface of TweetHideRequest) -
@return TweetHideResponse
*/

type TweetsApiHideReplyByIdOpts struct {
	Body optional.Interface
}

func (a *TweetsApiService) HideReplyById(ctx context.Context, tweetId string, localVarOptionals *TweetsApiHideReplyByIdOpts) (TweetHideResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue TweetHideResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/{tweet_id}/hidden"
	localVarPath = strings.Replace(localVarPath, "{"+"tweet_id"+"}", fmt.Sprintf("%v", tweetId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {

		localVarOptionalBody := localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v TweetHideResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService List Tweets timeline by List ID.
Returns a list of Tweets associated with the provided List ID.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the List.
 * @param optional nil or *TweetsApiListsIdTweetsOpts - Optional Parameters:
     * @param "MaxResults" (optional.Int32) -  The maximum number of results.
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2ListsIdTweetsResponse
*/

type TweetsApiListsIdTweetsOpts struct {
	MaxResults      optional.Int32
	PaginationToken optional.Interface
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) ListsIdTweets(ctx context.Context, id string, localVarOptionals *TweetsApiListsIdTweetsOpts) (Get2ListsIdTweetsResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2ListsIdTweetsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/lists/{id}/tweets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2ListsIdTweetsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Sample stream
Streams a deterministic 1% of public Tweets.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *TweetsApiSampleStreamOpts - Optional Parameters:
     * @param "BackfillMinutes" (optional.Int32) -  The number of minutes of backfill requested.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return StreamingTweetResponse
*/

type TweetsApiSampleStreamOpts struct {
	BackfillMinutes optional.Int32
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) SampleStream(ctx context.Context, localVarOptionals *TweetsApiSampleStreamOpts) (StreamingTweetResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue StreamingTweetResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/sample/stream"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.BackfillMinutes.IsSet() {
		localVarQueryParams.Add("backfill_minutes", parameterToString(localVarOptionals.BackfillMinutes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v StreamingTweetResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Filtered stream
Streams Tweets matching the stream&#x27;s active rule set.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *TweetsApiSearchStreamOpts - Optional Parameters:
     * @param "BackfillMinutes" (optional.Int32) -  The number of minutes of backfill requested.
     * @param "StartTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided.
     * @param "EndTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return FilteredStreamingTweetResponse
*/

type TweetsApiSearchStreamOpts struct {
	BackfillMinutes optional.Int32
	StartTime       optional.Time
	EndTime         optional.Time
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) SearchStream(ctx context.Context, localVarOptionals *TweetsApiSearchStreamOpts) (FilteredStreamingTweetResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue FilteredStreamingTweetResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/search/stream"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.BackfillMinutes.IsSet() {
		localVarQueryParams.Add("backfill_minutes", parameterToString(localVarOptionals.BackfillMinutes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarQueryParams.Add("end_time", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v FilteredStreamingTweetResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Retrieve the list of Users who purchased a ticket to the given space
Retrieves the list of Users who purchased a ticket to the given space
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the Space to be retrieved.
 * @param optional nil or *TweetsApiSpaceBuyersOpts - Optional Parameters:
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get a specified &#x27;page&#x27; of results.
     * @param "MaxResults" (optional.Int32) -  The maximum number of results.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
@return Get2SpacesIdBuyersResponse
*/

type TweetsApiSpaceBuyersOpts struct {
	PaginationToken optional.Interface
	MaxResults      optional.Int32
	UserFields      optional.Interface
	Expansions      optional.Interface
	TweetFields     optional.Interface
}

func (a *TweetsApiService) SpaceBuyers(ctx context.Context, id string, localVarOptionals *TweetsApiSpaceBuyersOpts) (Get2SpacesIdBuyersResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2SpacesIdBuyersResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/spaces/{id}/buyers"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2SpacesIdBuyersResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Retrieve Tweets from a Space.
Retrieves Tweets shared in the specified Space.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the Space to be retrieved.
 * @param optional nil or *TweetsApiSpaceTweetsOpts - Optional Parameters:
     * @param "MaxResults" (optional.Int32) -  The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2SpacesIdTweetsResponse
*/

type TweetsApiSpaceTweetsOpts struct {
	MaxResults  optional.Int32
	TweetFields optional.Interface
	Expansions  optional.Interface
	MediaFields optional.Interface
	PollFields  optional.Interface
	UserFields  optional.Interface
	PlaceFields optional.Interface
}

func (a *TweetsApiService) SpaceTweets(ctx context.Context, id string, localVarOptionals *TweetsApiSpaceTweetsOpts) (Get2SpacesIdTweetsResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2SpacesIdTweetsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/spaces/{id}/tweets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2SpacesIdTweetsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Full archive search counts
Returns Tweet Counts that match a search query.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
 * @param optional nil or *TweetsApiTweetCountsFullArchiveSearchOpts - Optional Parameters:
     * @param "StartTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
     * @param "EndTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
     * @param "SinceId" (optional.Interface of string) -  Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
     * @param "UntilId" (optional.Interface of string) -  Returns results with a Tweet ID less than (that is, older than) the specified ID.
     * @param "NextToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param "Granularity" (optional.String) -  The granularity for the search counts results.
     * @param "SearchCountFields" (optional.Interface of []string) -  A comma separated list of SearchCount fields to display.
@return Get2TweetsCountsAllResponse
*/

type TweetsApiTweetCountsFullArchiveSearchOpts struct {
	StartTime         optional.Time
	EndTime           optional.Time
	SinceId           optional.Interface
	UntilId           optional.Interface
	NextToken         optional.Interface
	PaginationToken   optional.Interface
	Granularity       optional.String
	SearchCountFields optional.Interface
}

func (a *TweetsApiService) TweetCountsFullArchiveSearch(ctx context.Context, query string, localVarOptionals *TweetsApiTweetCountsFullArchiveSearchOpts) (Get2TweetsCountsAllResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2TweetsCountsAllResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/counts/all"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(query) < 1 {
		return localVarReturnValue, nil, reportError("query must have at least 1 elements")
	}
	if strlen(query) > 4096 {
		return localVarReturnValue, nil, reportError("query must have less than 4096 elements")
	}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarQueryParams.Add("end_time", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SinceId.IsSet() {
		localVarQueryParams.Add("since_id", parameterToString(localVarOptionals.SinceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UntilId.IsSet() {
		localVarQueryParams.Add("until_id", parameterToString(localVarOptionals.UntilId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NextToken.IsSet() {
		localVarQueryParams.Add("next_token", parameterToString(localVarOptionals.NextToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Granularity.IsSet() {
		localVarQueryParams.Add("granularity", parameterToString(localVarOptionals.Granularity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchCountFields.IsSet() {
		localVarQueryParams.Add("search_count.fields", parameterToString(localVarOptionals.SearchCountFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2TweetsCountsAllResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Recent search counts
Returns Tweet Counts from the last 7 days that match a search query.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
 * @param optional nil or *TweetsApiTweetCountsRecentSearchOpts - Optional Parameters:
     * @param "StartTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
     * @param "EndTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
     * @param "SinceId" (optional.Interface of string) -  Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
     * @param "UntilId" (optional.Interface of string) -  Returns results with a Tweet ID less than (that is, older than) the specified ID.
     * @param "NextToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param "Granularity" (optional.String) -  The granularity for the search counts results.
     * @param "SearchCountFields" (optional.Interface of []string) -  A comma separated list of SearchCount fields to display.
@return Get2TweetsCountsRecentResponse
*/

type TweetsApiTweetCountsRecentSearchOpts struct {
	StartTime         optional.Time
	EndTime           optional.Time
	SinceId           optional.Interface
	UntilId           optional.Interface
	NextToken         optional.Interface
	PaginationToken   optional.Interface
	Granularity       optional.String
	SearchCountFields optional.Interface
}

func (a *TweetsApiService) TweetCountsRecentSearch(ctx context.Context, query string, localVarOptionals *TweetsApiTweetCountsRecentSearchOpts) (Get2TweetsCountsRecentResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2TweetsCountsRecentResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/counts/recent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(query) < 1 {
		return localVarReturnValue, nil, reportError("query must have at least 1 elements")
	}
	if strlen(query) > 4096 {
		return localVarReturnValue, nil, reportError("query must have less than 4096 elements")
	}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarQueryParams.Add("end_time", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SinceId.IsSet() {
		localVarQueryParams.Add("since_id", parameterToString(localVarOptionals.SinceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UntilId.IsSet() {
		localVarQueryParams.Add("until_id", parameterToString(localVarOptionals.UntilId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NextToken.IsSet() {
		localVarQueryParams.Add("next_token", parameterToString(localVarOptionals.NextToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Granularity.IsSet() {
		localVarQueryParams.Add("granularity", parameterToString(localVarOptionals.Granularity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchCountFields.IsSet() {
		localVarQueryParams.Add("search_count.fields", parameterToString(localVarOptionals.SearchCountFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2TweetsCountsRecentResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Full-archive search
Returns Tweets that match a search query.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
 * @param optional nil or *TweetsApiTweetsFullarchiveSearchOpts - Optional Parameters:
     * @param "StartTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
     * @param "EndTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
     * @param "SinceId" (optional.Interface of string) -  Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
     * @param "UntilId" (optional.Interface of string) -  Returns results with a Tweet ID less than (that is, older than) the specified ID.
     * @param "MaxResults" (optional.Int32) -  The maximum number of search results to be returned by a request.
     * @param "NextToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param "SortOrder" (optional.String) -  This order in which to return results.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2TweetsSearchAllResponse
*/

type TweetsApiTweetsFullarchiveSearchOpts struct {
	StartTime       optional.Time
	EndTime         optional.Time
	SinceId         optional.Interface
	UntilId         optional.Interface
	MaxResults      optional.Int32
	NextToken       optional.Interface
	PaginationToken optional.Interface
	SortOrder       optional.String
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) TweetsFullarchiveSearch(ctx context.Context, query string, localVarOptionals *TweetsApiTweetsFullarchiveSearchOpts) (Get2TweetsSearchAllResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2TweetsSearchAllResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/search/all"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(query) < 1 {
		return localVarReturnValue, nil, reportError("query must have at least 1 elements")
	}
	if strlen(query) > 4096 {
		return localVarReturnValue, nil, reportError("query must have less than 4096 elements")
	}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarQueryParams.Add("end_time", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SinceId.IsSet() {
		localVarQueryParams.Add("since_id", parameterToString(localVarOptionals.SinceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UntilId.IsSet() {
		localVarQueryParams.Add("until_id", parameterToString(localVarOptionals.UntilId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NextToken.IsSet() {
		localVarQueryParams.Add("next_token", parameterToString(localVarOptionals.NextToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortOrder.IsSet() {
		localVarQueryParams.Add("sort_order", parameterToString(localVarOptionals.SortOrder.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2TweetsSearchAllResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Recent search
Returns Tweets from the last 7 days that match a search query.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
 * @param optional nil or *TweetsApiTweetsRecentSearchOpts - Optional Parameters:
     * @param "StartTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
     * @param "EndTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
     * @param "SinceId" (optional.Interface of string) -  Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
     * @param "UntilId" (optional.Interface of string) -  Returns results with a Tweet ID less than (that is, older than) the specified ID.
     * @param "MaxResults" (optional.Int32) -  The maximum number of search results to be returned by a request.
     * @param "NextToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param "SortOrder" (optional.String) -  This order in which to return results.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2TweetsSearchRecentResponse
*/

type TweetsApiTweetsRecentSearchOpts struct {
	StartTime       optional.Time
	EndTime         optional.Time
	SinceId         optional.Interface
	UntilId         optional.Interface
	MaxResults      optional.Int32
	NextToken       optional.Interface
	PaginationToken optional.Interface
	SortOrder       optional.String
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) TweetsRecentSearch(ctx context.Context, query string, localVarOptionals *TweetsApiTweetsRecentSearchOpts) (Get2TweetsSearchRecentResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2TweetsSearchRecentResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/tweets/search/recent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(query) < 1 {
		return localVarReturnValue, nil, reportError("query must have at least 1 elements")
	}
	if strlen(query) > 4096 {
		return localVarReturnValue, nil, reportError("query must have less than 4096 elements")
	}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarQueryParams.Add("end_time", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SinceId.IsSet() {
		localVarQueryParams.Add("since_id", parameterToString(localVarOptionals.SinceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UntilId.IsSet() {
		localVarQueryParams.Add("until_id", parameterToString(localVarOptionals.UntilId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NextToken.IsSet() {
		localVarQueryParams.Add("next_token", parameterToString(localVarOptionals.NextToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortOrder.IsSet() {
		localVarQueryParams.Add("sort_order", parameterToString(localVarOptionals.SortOrder.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2TweetsSearchRecentResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Causes the User (in the path) to like the specified Tweet
Causes the User (in the path) to like the specified Tweet. The User in the path must match the User context authorizing the request.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the authenticated source User that is requesting to like the Tweet.
 * @param optional nil or *TweetsApiUsersIdLikeOpts - Optional Parameters:
     * @param "Body" (optional.Interface of UsersLikesCreateRequest) -
@return UsersLikesCreateResponse
*/

type TweetsApiUsersIdLikeOpts struct {
	Body optional.Interface
}

func (a *TweetsApiService) UsersIdLike(ctx context.Context, id string, localVarOptionals *TweetsApiUsersIdLikeOpts) (UsersLikesCreateResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue UsersLikesCreateResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/users/{id}/likes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {

		localVarOptionalBody := localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v UsersLikesCreateResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Returns Tweet objects liked by the provided User ID
Returns a list of Tweets liked by the provided User ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the User to lookup.
 * @param optional nil or *TweetsApiUsersIdLikedTweetsOpts - Optional Parameters:
     * @param "MaxResults" (optional.Int32) -  The maximum number of results.
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2UsersIdLikedTweetsResponse
*/

type TweetsApiUsersIdLikedTweetsOpts struct {
	MaxResults      optional.Int32
	PaginationToken optional.Interface
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) UsersIdLikedTweets(ctx context.Context, id string, localVarOptionals *TweetsApiUsersIdLikedTweetsOpts) (Get2UsersIdLikedTweetsResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2UsersIdLikedTweetsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/users/{id}/liked_tweets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2UsersIdLikedTweetsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService User mention timeline by User ID
Returns Tweet objects that mention username associated to the provided User ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the User to lookup.
 * @param optional nil or *TweetsApiUsersIdMentionsOpts - Optional Parameters:
     * @param "SinceId" (optional.Interface of string) -  The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
     * @param "UntilId" (optional.Interface of string) -  The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
     * @param "MaxResults" (optional.Int32) -  The maximum number of results.
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results.
     * @param "StartTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
     * @param "EndTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2UsersIdMentionsResponse
*/

type TweetsApiUsersIdMentionsOpts struct {
	SinceId         optional.Interface
	UntilId         optional.Interface
	MaxResults      optional.Int32
	PaginationToken optional.Interface
	StartTime       optional.Time
	EndTime         optional.Time
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) UsersIdMentions(ctx context.Context, id string, localVarOptionals *TweetsApiUsersIdMentionsOpts) (Get2UsersIdMentionsResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2UsersIdMentionsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/users/{id}/mentions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.SinceId.IsSet() {
		localVarQueryParams.Add("since_id", parameterToString(localVarOptionals.SinceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UntilId.IsSet() {
		localVarQueryParams.Add("until_id", parameterToString(localVarOptionals.UntilId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarQueryParams.Add("end_time", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2UsersIdMentionsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Causes the User (in the path) to retweet the specified Tweet.
Causes the User (in the path) to retweet the specified Tweet. The User in the path must match the User context authorizing the request.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the authenticated source User that is requesting to retweet the Tweet.
 * @param optional nil or *TweetsApiUsersIdRetweetsOpts - Optional Parameters:
     * @param "Body" (optional.Interface of UsersRetweetsCreateRequest) -
@return UsersRetweetsCreateResponse
*/

type TweetsApiUsersIdRetweetsOpts struct {
	Body optional.Interface
}

func (a *TweetsApiService) UsersIdRetweets(ctx context.Context, id string, localVarOptionals *TweetsApiUsersIdRetweetsOpts) (UsersRetweetsCreateResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue UsersRetweetsCreateResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/users/{id}/retweets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {

		localVarOptionalBody := localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v UsersRetweetsCreateResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService User home timeline by User ID
Returns Tweet objects that appears in the provided User ID&#x27;s home timeline
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the authenticated source User to list Reverse Chronological Timeline Tweets of.
 * @param optional nil or *TweetsApiUsersIdTimelineOpts - Optional Parameters:
     * @param "SinceId" (optional.Interface of string) -  The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
     * @param "UntilId" (optional.Interface of string) -  The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
     * @param "MaxResults" (optional.Int32) -  The maximum number of results.
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results.
     * @param "Exclude" (optional.Interface of []string) -  The set of entities to exclude (e.g. &#x27;replies&#x27; or &#x27;retweets&#x27;).
     * @param "StartTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
     * @param "EndTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2UsersIdTimelinesReverseChronologicalResponse
*/

type TweetsApiUsersIdTimelineOpts struct {
	SinceId         optional.Interface
	UntilId         optional.Interface
	MaxResults      optional.Int32
	PaginationToken optional.Interface
	Exclude         optional.Interface
	StartTime       optional.Time
	EndTime         optional.Time
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) UsersIdTimeline(ctx context.Context, id string, localVarOptionals *TweetsApiUsersIdTimelineOpts) (Get2UsersIdTimelinesReverseChronologicalResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2UsersIdTimelinesReverseChronologicalResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/users/{id}/timelines/reverse_chronological"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.SinceId.IsSet() {
		localVarQueryParams.Add("since_id", parameterToString(localVarOptionals.SinceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UntilId.IsSet() {
		localVarQueryParams.Add("until_id", parameterToString(localVarOptionals.UntilId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Exclude.IsSet() {
		localVarQueryParams.Add("exclude", parameterToString(localVarOptionals.Exclude.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarQueryParams.Add("end_time", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2UsersIdTimelinesReverseChronologicalResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService User Tweets timeline by User ID
Returns a list of Tweets authored by the provided User ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the User to lookup.
 * @param optional nil or *TweetsApiUsersIdTweetsOpts - Optional Parameters:
     * @param "SinceId" (optional.Interface of string) -  The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
     * @param "UntilId" (optional.Interface of string) -  The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
     * @param "MaxResults" (optional.Int32) -  The maximum number of results.
     * @param "PaginationToken" (optional.Interface of string) -  This parameter is used to get the next &#x27;page&#x27; of results.
     * @param "Exclude" (optional.Interface of []string) -  The set of entities to exclude (e.g. &#x27;replies&#x27; or &#x27;retweets&#x27;).
     * @param "StartTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
     * @param "EndTime" (optional.Time) -  YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
     * @param "TweetFields" (optional.Interface of []string) -  A comma separated list of Tweet fields to display.
     * @param "Expansions" (optional.Interface of []string) -  A comma separated list of fields to expand.
     * @param "MediaFields" (optional.Interface of []string) -  A comma separated list of Media fields to display.
     * @param "PollFields" (optional.Interface of []string) -  A comma separated list of Poll fields to display.
     * @param "UserFields" (optional.Interface of []string) -  A comma separated list of User fields to display.
     * @param "PlaceFields" (optional.Interface of []string) -  A comma separated list of Place fields to display.
@return Get2UsersIdTweetsResponse
*/

type TweetsApiUsersIdTweetsOpts struct {
	SinceId         optional.Interface
	UntilId         optional.Interface
	MaxResults      optional.Int32
	PaginationToken optional.Interface
	Exclude         optional.Interface
	StartTime       optional.Time
	EndTime         optional.Time
	TweetFields     optional.Interface
	Expansions      optional.Interface
	MediaFields     optional.Interface
	PollFields      optional.Interface
	UserFields      optional.Interface
	PlaceFields     optional.Interface
}

func (a *TweetsApiService) UsersIdTweets(ctx context.Context, id string, localVarOptionals *TweetsApiUsersIdTweetsOpts) (Get2UsersIdTweetsResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Get2UsersIdTweetsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/users/{id}/tweets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.SinceId.IsSet() {
		localVarQueryParams.Add("since_id", parameterToString(localVarOptionals.SinceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UntilId.IsSet() {
		localVarQueryParams.Add("until_id", parameterToString(localVarOptionals.UntilId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("max_results", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaginationToken.IsSet() {
		localVarQueryParams.Add("pagination_token", parameterToString(localVarOptionals.PaginationToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Exclude.IsSet() {
		localVarQueryParams.Add("exclude", parameterToString(localVarOptionals.Exclude.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarQueryParams.Add("end_time", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TweetFields.IsSet() {
		localVarQueryParams.Add("tweet.fields", parameterToString(localVarOptionals.TweetFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expansions.IsSet() {
		localVarQueryParams.Add("expansions", parameterToString(localVarOptionals.Expansions.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.MediaFields.IsSet() {
		localVarQueryParams.Add("media.fields", parameterToString(localVarOptionals.MediaFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PollFields.IsSet() {
		localVarQueryParams.Add("poll.fields", parameterToString(localVarOptionals.PollFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.UserFields.IsSet() {
		localVarQueryParams.Add("user.fields", parameterToString(localVarOptionals.UserFields.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceFields.IsSet() {
		localVarQueryParams.Add("place.fields", parameterToString(localVarOptionals.PlaceFields.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Get2UsersIdTweetsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Causes the User (in the path) to unlike the specified Tweet
Causes the User (in the path) to unlike the specified Tweet. The User must match the User context authorizing the request
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param id The ID of the authenticated source User that is requesting to unlike the Tweet.
  - @param tweetId The ID of the Tweet that the User is requesting to unlike.

@return UsersLikesDeleteResponse
*/
func (a *TweetsApiService) UsersIdUnlike(ctx context.Context, id string, tweetId string) (UsersLikesDeleteResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue UsersLikesDeleteResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/users/{id}/likes/{tweet_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tweet_id"+"}", fmt.Sprintf("%v", tweetId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v UsersLikesDeleteResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TweetsApiService Causes the User (in the path) to unretweet the specified Tweet
Causes the User (in the path) to unretweet the specified Tweet. The User must match the User context authorizing the request
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param id The ID of the authenticated source User that is requesting to retweet the Tweet.
  - @param sourceTweetId The ID of the Tweet that the User is requesting to unretweet.

@return UsersRetweetsDeleteResponse
*/
func (a *TweetsApiService) UsersIdUnretweets(ctx context.Context, id string, sourceTweetId string) (UsersRetweetsDeleteResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue UsersRetweetsDeleteResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/2/users/{id}/retweets/{source_tweet_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"source_tweet_id"+"}", fmt.Sprintf("%v", sourceTweetId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v UsersRetweetsDeleteResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
